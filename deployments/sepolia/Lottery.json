{
  "address": "0x0eaa9D36cc07Ab86615e81521ee09Ae69f1032cB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "entranceFee",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RAffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleStates",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "pickedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Lottery.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b1ccfd2559cd2a3f1a147877da9d8df80254070dc9c17fc8bd8dc82cf1f6aa4",
  "receipt": {
    "to": null,
    "from": "0xAAc35562d4b300B092Af9386C954D7e30A38d3EF",
    "contractAddress": "0x0eaa9D36cc07Ab86615e81521ee09Ae69f1032cB",
    "transactionIndex": 1,
    "gasUsed": "1249116",
    "logsBloom": "0x
    "blockHash": "0x5564d7fd6c32395c3f8bd946a4c54afad40611a754a53c2de957e402dad03506",
    "transactionHash": "0x6b1ccfd2559cd2a3f1a147877da9d8df80254070dc9c17fc8bd8dc82cf1f6aa4",
    "logs": [],
    "blockNumber": 5848726,
    "cumulativeGasUsed": "1270116",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "0",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "f282534f93bc0ee6eb93ec50ffd27edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"entranceFee\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RAffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleStates\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"pickedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Lottery.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identiffier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle_TransferFailed();\\nerror RAffle__NotOpen();\\nerror Raffle__UpKeepNotNeeded(uint currentBalance, uint256 numPlayers, uint256 raffleStates);\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CAlCULATING\\n    }\\n    /* Staate Variables */\\n    uint64 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private s_vrfCoordinatorV2;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private immutable i_numWord;\\n\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private i_interval;\\n\\n    /* Events */\\n\\n    event raffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event pickedWinner(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        s_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert RAffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit raffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upKeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        return (upKeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        s_raffleState = RaffleState.CAlCULATING;\\n        uint256 requestId = s_vrfCoordinatorV2.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            i_numWord\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle_TransferFailed();\\n        }\\n\\n        emit pickedWinner(s_recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getRequestConfirmation() public view returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0x452d9b7b72a6d1fc745ed0d718987d453095e17b33e47f8f8c31ccfca222aa93\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001810380380620018108339818101604052810190620000389190620002b2565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508467ffffffffffffffff1660a08167ffffffffffffffff168152505085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200012d576200012c6200034e565b5b021790555042600381905550806004819055505050505050506200037d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017e8262000151565b9050919050565b620001908162000171565b81146200019c57600080fd5b50565b600081519050620001b08162000185565b92915050565b600067ffffffffffffffff82169050919050565b620001d581620001b6565b8114620001e157600080fd5b50565b600081519050620001f581620001ca565b92915050565b6000819050919050565b6200021081620001fb565b81146200021c57600080fd5b50565b600081519050620002308162000205565b92915050565b600063ffffffff82169050919050565b620002518162000236565b81146200025d57600080fd5b50565b600081519050620002718162000246565b92915050565b6000819050919050565b6200028c8162000277565b81146200029857600080fd5b50565b600081519050620002ac8162000281565b92915050565b60008060008060008060c08789031215620002d257620002d16200014c565b5b6000620002e289828a016200019f565b9650506020620002f589828a01620001e4565b95505060406200030889828a016200021f565b94505060606200031b89828a01620001e4565b93505060806200032e89828a0162000260565b92505060a06200034189828a016200029b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051611435620003db60003960006106970152600061067601526000610653015260006106320152600081816102b401526103bb0152600081816102fb015261034f01526114356000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc146101895780636e04ff0d146101b457806391ad27b4146101f2578063ca6a9ef81461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610bbf565b60405180910390f35b3480156100e357600080fd5b506100ec6102e2565b6040516100f99190610c51565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e05565b6102f9565b005b6101336103b9565b005b34801561014157600080fd5b5061014a610532565b6040516101579190610bbf565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ebc565b61053c565b005b34801561019557600080fd5b5061019e61074e565b6040516101ab9190610f4a565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061101a565b610778565b6040516101e99291906110fd565b60405180910390f35b3480156101fe57600080fd5b50610207610842565b6040516102149190610bbf565b60405180910390f35b34801561022957600080fd5b5061023261084c565b60405161023f9190610bbf565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a919061112d565b610859565b60405161027c9190610f4a565b60405180910390f35b34801561029157600080fd5b5061029a6108a0565b6040516102a79190610bbf565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ab57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a292919061115a565b60405180910390fd5b6103b582826108ac565b5050565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1634101561041d576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043157610430610bda565b5b600260149054906101000a900460ff16600181111561045357610452610bda565b5b1461048a576040517f043b690100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b6000600354905090565b600061055660405180602001604052806000815250610778565b509050806105c55747600080549050600260149054906101000a900460ff16600181111561058757610586610bda565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105bc93929190611183565b60405180910390fd5b6001600260146101000a81548160ff021916908360018111156105eb576105ea610bda565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016106d6959493929190611232565b6020604051808303816000875af11580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610719919061129a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600260149054906101000a900460ff1660018111156107a05761079f610bda565b5b600060018111156107b4576107b3610bda565b5b1490506000600454600354426107ca91906112f6565b119050600080600080549050119050600080471190508380156107ea5750825b80156107f35750815b80156107fc5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600454905090565b6000600361ffff16905090565b600080828154811061086e5761086d61132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108c7576108c661132a565b5b60200260200101516108d99190611388565b905060008082815481106108f0576108ef61132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff0219169083600181111561098457610983610bda565b5b0217905550600067ffffffffffffffff8111156109a4576109a3610cc2565b5b6040519080825280602002602001820160405280156109d25781602001602082028036833780820191505090505b50600090805190602001906109e8929190610aff565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a16906113ea565b60006040518083038185875af1925050503d8060008114610a53576040519150601f19603f3d011682016040523d82523d6000602084013e610a58565b606091505b5050905080610a93576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbc37d6d61c349260ba741b543972bfe4077fdd0f71c9b8f4a7452392167d17260405160405180910390a25050505050565b828054828255906000526020600020908101928215610b78579160200282015b82811115610b775782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1f565b5b509050610b859190610b89565b5090565b5b80821115610ba2576000816000905550600101610b8a565b5090565b6000819050919050565b610bb981610ba6565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1a57610c19610bda565b5b50565b6000819050610c2b82610c09565b919050565b6000610c3b82610c1d565b9050919050565b610c4b81610c30565b82525050565b6000602082019050610c666000830184610c42565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8981610ba6565b8114610c9457600080fd5b50565b600081359050610ca681610c80565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cfa82610cb1565b810181811067ffffffffffffffff82111715610d1957610d18610cc2565b5b80604052505050565b6000610d2c610c6c565b9050610d388282610cf1565b919050565b600067ffffffffffffffff821115610d5857610d57610cc2565b5b602082029050602081019050919050565b600080fd5b6000610d81610d7c84610d3d565b610d22565b90508083825260208201905060208402830185811115610da457610da3610d69565b5b835b81811015610dcd5780610db98882610c97565b845260208401935050602081019050610da6565b5050509392505050565b600082601f830112610dec57610deb610cac565b5b8135610dfc848260208601610d6e565b91505092915050565b60008060408385031215610e1c57610e1b610c76565b5b6000610e2a85828601610c97565b925050602083013567ffffffffffffffff811115610e4b57610e4a610c7b565b5b610e5785828601610dd7565b9150509250929050565b600080fd5b60008083601f840112610e7c57610e7b610cac565b5b8235905067ffffffffffffffff811115610e9957610e98610e61565b5b602083019150836001820283011115610eb557610eb4610d69565b5b9250929050565b60008060208385031215610ed357610ed2610c76565b5b600083013567ffffffffffffffff811115610ef157610ef0610c7b565b5b610efd85828601610e66565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3482610f09565b9050919050565b610f4481610f29565b82525050565b6000602082019050610f5f6000830184610f3b565b92915050565b600080fd5b600067ffffffffffffffff821115610f8557610f84610cc2565b5b610f8e82610cb1565b9050602081019050919050565b82818337600083830152505050565b6000610fbd610fb884610f6a565b610d22565b905082815260208101848484011115610fd957610fd8610f65565b5b610fe4848285610f9b565b509392505050565b600082601f83011261100157611000610cac565b5b8135611011848260208601610faa565b91505092915050565b6000602082840312156110305761102f610c76565b5b600082013567ffffffffffffffff81111561104e5761104d610c7b565b5b61105a84828501610fec565b91505092915050565b60008115159050919050565b61107881611063565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b857808201518184015260208101905061109d565b60008484015250505050565b60006110cf8261107e565b6110d98185611089565b93506110e981856020860161109a565b6110f281610cb1565b840191505092915050565b6000604082019050611112600083018561106f565b818103602083015261112481846110c4565b90509392505050565b60006020828403121561114357611142610c76565b5b600061115184828501610c97565b91505092915050565b600060408201905061116f6000830185610f3b565b61117c6020830184610f3b565b9392505050565b60006060820190506111986000830186610bb0565b6111a56020830185610bb0565b6111b26040830184610bb0565b949350505050565b6000819050919050565b6111cd816111ba565b82525050565b600067ffffffffffffffff82169050919050565b6111f0816111d3565b82525050565b600061ffff82169050919050565b61120d816111f6565b82525050565b600063ffffffff82169050919050565b61122c81611213565b82525050565b600060a08201905061124760008301886111c4565b61125460208301876111e7565b6112616040830186611204565b61126e6060830185611223565b61127b6080830184611223565b9695505050505050565b60008151905061129481610c80565b92915050565b6000602082840312156112b0576112af610c76565b5b60006112be84828501611285565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130182610ba6565b915061130c83610ba6565b9250828203905081811115611324576113236112c7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139382610ba6565b915061139e83610ba6565b9250826113ae576113ad611359565b5b828206905092915050565b600081905092915050565b50565b60006113d46000836113b9565b91506113df826113c4565b600082019050919050565b60006113f5826113c7565b915081905091905056fea2646970667358221220425331afec0bc7dad57843ab76e3fa47c8fe7a713954050c4d3a030328804b4964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc146101895780636e04ff0d146101b457806391ad27b4146101f2578063ca6a9ef81461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610bbf565b60405180910390f35b3480156100e357600080fd5b506100ec6102e2565b6040516100f99190610c51565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e05565b6102f9565b005b6101336103b9565b005b34801561014157600080fd5b5061014a610532565b6040516101579190610bbf565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ebc565b61053c565b005b34801561019557600080fd5b5061019e61074e565b6040516101ab9190610f4a565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061101a565b610778565b6040516101e99291906110fd565b60405180910390f35b3480156101fe57600080fd5b50610207610842565b6040516102149190610bbf565b60405180910390f35b34801561022957600080fd5b5061023261084c565b60405161023f9190610bbf565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a919061112d565b610859565b60405161027c9190610f4a565b60405180910390f35b34801561029157600080fd5b5061029a6108a0565b6040516102a79190610bbf565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ab57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a292919061115a565b60405180910390fd5b6103b582826108ac565b5050565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1634101561041d576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043157610430610bda565b5b600260149054906101000a900460ff16600181111561045357610452610bda565b5b1461048a576040517f043b690100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b6000600354905090565b600061055660405180602001604052806000815250610778565b509050806105c55747600080549050600260149054906101000a900460ff16600181111561058757610586610bda565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105bc93929190611183565b60405180910390fd5b6001600260146101000a81548160ff021916908360018111156105eb576105ea610bda565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016106d6959493929190611232565b6020604051808303816000875af11580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610719919061129a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600260149054906101000a900460ff1660018111156107a05761079f610bda565b5b600060018111156107b4576107b3610bda565b5b1490506000600454600354426107ca91906112f6565b119050600080600080549050119050600080471190508380156107ea5750825b80156107f35750815b80156107fc5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600454905090565b6000600361ffff16905090565b600080828154811061086e5761086d61132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108c7576108c661132a565b5b60200260200101516108d99190611388565b905060008082815481106108f0576108ef61132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff0219169083600181111561098457610983610bda565b5b0217905550600067ffffffffffffffff8111156109a4576109a3610cc2565b5b6040519080825280602002602001820160405280156109d25781602001602082028036833780820191505090505b50600090805190602001906109e8929190610aff565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a16906113ea565b60006040518083038185875af1925050503d8060008114610a53576040519150601f19603f3d011682016040523d82523d6000602084013e610a58565b606091505b5050905080610a93576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbc37d6d61c349260ba741b543972bfe4077fdd0f71c9b8f4a7452392167d17260405160405180910390a25050505050565b828054828255906000526020600020908101928215610b78579160200282015b82811115610b775782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1f565b5b509050610b859190610b89565b5090565b5b80821115610ba2576000816000905550600101610b8a565b5090565b6000819050919050565b610bb981610ba6565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1a57610c19610bda565b5b50565b6000819050610c2b82610c09565b919050565b6000610c3b82610c1d565b9050919050565b610c4b81610c30565b82525050565b6000602082019050610c666000830184610c42565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8981610ba6565b8114610c9457600080fd5b50565b600081359050610ca681610c80565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cfa82610cb1565b810181811067ffffffffffffffff82111715610d1957610d18610cc2565b5b80604052505050565b6000610d2c610c6c565b9050610d388282610cf1565b919050565b600067ffffffffffffffff821115610d5857610d57610cc2565b5b602082029050602081019050919050565b600080fd5b6000610d81610d7c84610d3d565b610d22565b90508083825260208201905060208402830185811115610da457610da3610d69565b5b835b81811015610dcd5780610db98882610c97565b845260208401935050602081019050610da6565b5050509392505050565b600082601f830112610dec57610deb610cac565b5b8135610dfc848260208601610d6e565b91505092915050565b60008060408385031215610e1c57610e1b610c76565b5b6000610e2a85828601610c97565b925050602083013567ffffffffffffffff811115610e4b57610e4a610c7b565b5b610e5785828601610dd7565b9150509250929050565b600080fd5b60008083601f840112610e7c57610e7b610cac565b5b8235905067ffffffffffffffff811115610e9957610e98610e61565b5b602083019150836001820283011115610eb557610eb4610d69565b5b9250929050565b60008060208385031215610ed357610ed2610c76565b5b600083013567ffffffffffffffff811115610ef157610ef0610c7b565b5b610efd85828601610e66565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3482610f09565b9050919050565b610f4481610f29565b82525050565b6000602082019050610f5f6000830184610f3b565b92915050565b600080fd5b600067ffffffffffffffff821115610f8557610f84610cc2565b5b610f8e82610cb1565b9050602081019050919050565b82818337600083830152505050565b6000610fbd610fb884610f6a565b610d22565b905082815260208101848484011115610fd957610fd8610f65565b5b610fe4848285610f9b565b509392505050565b600082601f83011261100157611000610cac565b5b8135611011848260208601610faa565b91505092915050565b6000602082840312156110305761102f610c76565b5b600082013567ffffffffffffffff81111561104e5761104d610c7b565b5b61105a84828501610fec565b91505092915050565b60008115159050919050565b61107881611063565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b857808201518184015260208101905061109d565b60008484015250505050565b60006110cf8261107e565b6110d98185611089565b93506110e981856020860161109a565b6110f281610cb1565b840191505092915050565b6000604082019050611112600083018561106f565b818103602083015261112481846110c4565b90509392505050565b60006020828403121561114357611142610c76565b5b600061115184828501610c97565b91505092915050565b600060408201905061116f6000830185610f3b565b61117c6020830184610f3b565b9392505050565b60006060820190506111986000830186610bb0565b6111a56020830185610bb0565b6111b26040830184610bb0565b949350505050565b6000819050919050565b6111cd816111ba565b82525050565b600067ffffffffffffffff82169050919050565b6111f0816111d3565b82525050565b600061ffff82169050919050565b61120d816111f6565b82525050565b600063ffffffff82169050919050565b61122c81611213565b82525050565b600060a08201905061124760008301886111c4565b61125460208301876111e7565b6112616040830186611204565b61126e6060830185611223565b61127b6080830184611223565b9695505050505050565b60008151905061129481610c80565b92915050565b6000602082840312156112b0576112af610c76565b5b60006112be84828501611285565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130182610ba6565b915061130c83610ba6565b9250828203905081811115611324576113236112c7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139382610ba6565b915061139e83610ba6565b9250826113ae576113ad611359565b5b828206905092915050565b600081905092915050565b50565b60006113d46000836113b9565b91506113df826113c4565b600082019050919050565b60006113f5826113c7565b915081905091905056fea2646970667358221220425331afec0bc7dad57843ab76e3fa47c8fe7a713954050c4d3a030328804b4964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 208,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_vrfCoordinatorV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)172"
      },
      {
        "astId": 221,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)200"
      },
      {
        "astId": 226,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "i_interval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)172": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)200": {
        "encoding": "inplace",
        "label": "enum Lottery.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}